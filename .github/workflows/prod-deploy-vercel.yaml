name: Vercel Production Deployments
on:
  push:
    branches:
      - main

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
  GITHUB_TOKEN: ${{ secrets.ACTIONS_PAT_GITHUB }}
  BRANCH: ${{ github.ref_name }}

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the Repository
        uses: actions/checkout@v3
        with:
          persist-credentials: false
      - name: Setup NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: '22'
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install dependencies
        run: pnpm install
      - name: Ensure playwright has the latest browser binaries
        run: pnpx playwright install --with-deps && npx playwright install --with-deps
      - name: Ensure project is formatted and linted
        run: pnpm run lint
      - name: Ensure project syncs the configs
        run: pnpm run check
      - name: Build
        run: pnpm run build
      - name: Test
        run: pnpm run test
      - name: Setup GPG Keys
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          git_user_signingkey: true
          git_commit_gpgsign: true
          git_tag_gpgsign: true
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_KEY_PASSPHRASE }}
          git_committer_email: ${{ vars.GIT_AUTHOR_EMAIL }}
          fingerprint: ${{ vars.GPG_FINGERPRINT }}
          trust_level: ultimate
      - name: Create a release
        env:
          GITHUB_TOKEN: ${{ secrets.ACTIONS_PAT_GITHUB }}
          GH_TOKEN: ${{ secrets.ACTIONS_PAT_GITHUB }}
        run: pnpm run release
  Deploy-Production:
    runs-on: ubuntu-latest
    needs: build_and_test
    if: needs.build_and_test.result == 'success'
    steps:
      - name: Checkout the Repository
        uses: actions/checkout@v3
      - name: Decide Deployment Environment
        id: deployment_environment
        run: |
          if [[ ${{ env.BRANCH }} == "main" ]]; then
            echo "PROJECT_ENVIRONMENT=production" >> $GITHUB_ENV
          else
            echo echo "PROJECT_ENVIRONMENT=preview" >> $GITHUB_ENV
          fi
      - name: Setup NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: '20'
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install dependencies
        run: pnpm install
      - name: Ensure project syncs the configs
        run: pnpm run check
      - name: Populate Preview Variables
        run: vercel pull --yes --environment=${{env.PROJECT_ENVIRONMENT}} --token=${{ env.VERCEL_TOKEN }}
      - name: Build Project
        run: vercel build --prod --yes --token=${{ env.VERCEL_TOKEN }}
      - name: Deploy to Vercel
        run: vercel deploy --prod --prebuilt --token=${{ env.VERCEL_TOKEN }}
